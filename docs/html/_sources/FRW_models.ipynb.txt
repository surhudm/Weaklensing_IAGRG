{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Friedmann Robertson Walker models\n",
    "\n",
    "In this section, we will take a look at some consequences of the Friedmann Robertson Walker metric that we derived for a homogeneous and isotropic Universe. \n",
    "\n",
    "## Redshifts in an expanding Universe\n",
    "\n",
    "Light travels on null geodesics, and they satisfy $ds^2=0$ . Let us consider the position of our galaxy to be at the origin as a convenience. Let us look at a galaxy whose coordinates are ($\\chi, \\theta, \\phi$). The light coming from this galaxy will travel along constant values of ($\\theta, \\phi$) on its path to us. Thus it should satisfy\n",
    "\n",
    "$ds^2=0=-c^2 dt^2 + a^2(t) d\\chi^2$\n",
    "\n",
    "which implies that\n",
    "\n",
    "\\begin{equation}\n",
    "\\int_{t_e}^{t_r} \\frac{c dt}{a(t)} = -\\int_{0}^{\\chi} d\\chi \n",
    "\\end{equation}\n",
    "\n",
    "where $t_e$ denotes the time of emission, $t_r$ denotes the time of receipt of the photon. Now let us consider the emission and reception of a consecutive crest of the light wave. Let us suppose this second crest gets emitted at $t_e + \\delta t_e$, and will be received $t_r + \\delta t_r$. This implies that for this second crest, \n",
    "\n",
    "\\begin{equation}\n",
    "\\int_{t_e+\\delta t_r}^{t_r + \\delta t_r} \\frac{c dt}{a(t)} = -\\int_{0}^{\\chi} d\\chi \n",
    "\\end{equation}\n",
    "\n",
    "Subtracting the above equations we get\n",
    "\n",
    "\\begin{equation}\n",
    "\\frac{c \\delta t_e}{a(t_e)} -  \\frac{c \\delta t_r}{a(t_r)}= 0\n",
    "\\end{equation}\n",
    "\n",
    "Given that $\\lambda_e = c\\delta t_e$ and $\\lambda_r = c\\delta t_r$, are the wavelengths of the emitted and received light, we obtain\n",
    "\n",
    "\\begin{equation}\n",
    "\\frac{\\lambda_r}{\\lambda_e} = 1+z = \\frac{a(t_r)}{a(t_e)}\n",
    "\\end{equation}\n",
    "\n",
    "This implies that the wavelength of light changes as it travels in a Universe with varying scale factor. If $a(t)$ is an increasing function of time then this implies that the wavelength of the received light will be redshifted compared to when the light was emitted.\n",
    "\n",
    "## Expansion of the Universe (Hubble-Lemaitre's law)\n",
    "\n",
    "The FRW metric implies that the physical distances in the Universe scale with the scale factor. We can define mean motion coordinates  which move together in a concerted manner due to the change in scale factor. Such coordinates are called comoving coordinates. The physical distance between any two locations at a given point of time is thus given by $R_{\\rm phys} = a(t) R_{\\rm com}$ . The velocity between any two objects is then given by the rate of change of the physical distance\n",
    "\n",
    "\\begin{eqnarray}\n",
    "v = \\frac{d R_{\\rm phys}}{dt} &=& \\frac{d \\left[ a(t) R_{\\rm com} \\right]}{dt} \\\\\n",
    "&=&  \\frac{da}{dt} R_{\\rm com} + a(t) \\frac{d R_{\\rm com}}{dt} \\\\\n",
    "&=& \\frac{\\dot{a}}{a} R_{\\rm phys} + a(t) \\frac{d R_{\\rm com}}{dt}\n",
    "\\end{eqnarray}\n",
    "\n",
    "For fundamental observers at fixed locations in the comoving coordinates, the second term would be zero. This gives\n",
    "\n",
    "\\begin{equation}\n",
    "v = \\left[\\frac{\\dot{a}}{a}\\right] R_{\\rm phys}\n",
    "\\end{equation}\n",
    "\n",
    "This shows that the velocities should be proportional to the physical distance of galaxies. The constant of proportionality $\\dot{a}/a$ is called the Hubble-Lemaitre parameter. Note that $\\dot{a}/a$ is a function of time, the value at $t={\\rm today}$ is called the Hubble-Lemaitre constant.\n",
    "\n",
    "In reality galaxies will not necessarily sit still in comoving coordinates due to forces from other objects nearby. These velocities are called peculiar velocities and are a result of the small scale inhomogenieties in the Universe.\n",
    "\n",
    "The measurement of the Hubble Lemaitre constant is one of the biggest scientific inquiries currently. The value that Hubble derived in the 1920s was about $500$ ${\\rm km/s/Mpc}$. It was marred by observational issues. The current accepted value for the Hubble constant ranges from $67$ to $74$ ${\\rm km/s/Mpc}$.\n",
    "\n",
    "The units of the Hubble-Lemaitre constant are the inverse of the timescale. Thus the Hubble-Lemaitre constant sets a time scale in the Universe. The value of $1/H_0$ sets the order of magnitude for the timescale for the Universe. With the value of about $70$ ${\\rm km/s/Mpc}$, you get a value which is close to $1.46\\times10^{10}$ years.\n",
    "\n",
    "\n",
    "## Distances in the Universe\n",
    "\n",
    "### Angular size of a distant object of known physical size\n",
    "\n",
    "Consider the angle subtended at the observer by a known object of physical size $R_{\\rm phys}$ at a coordinate distance $\\chi$. Let us assume that the two ends of the object are aligned at constant angle $\\phi$. Thus in the metric we have $dt=0$, $d\\chi=0$ and $d\\phi=0$. The metric is then given by\n",
    "\n",
    "\\begin{equation}\n",
    "ds^2 = a^2(t) f^2(\\chi) d\\theta^2\n",
    "\\end{equation}\n",
    "\n",
    "The physical size of the object $R_{\\rm phys}=a(t) f(\\chi) \\Delta \\theta$. We can define a distance based on the angular size subtended by such an object as the angular diameter distance.\n",
    "\n",
    "\\begin{equation}\n",
    "D_{\\rm ang} = \\frac{R_{\\rm phys}}{\\Delta\\theta} = a(t) f(\\chi) = \\frac{f(\\chi)}{(1+z)}\n",
    "\\end{equation}\n",
    "\n",
    "<div class=\"alert alert-info \">\n",
    "    \n",
    "Exercise:\n",
    "\n",
    "- Can you compute the physical area of the sphere at coordinate $\\chi$ away from the observer situated at the origin?\n",
    "- Can you define the two dimensional analog of this problem on the surface of a sphere?\n",
    "- Can you compute the comoving coordinate volume of a sphere centered at the origin with radius given by the coordinate $\\chi$?\n",
    "    \n",
    "</div>\n",
    "\n",
    "### Flux received from a distant source\n",
    "\n",
    "Let us now consider the flux received from a distant source in the Universe, which has an intrinsic bolometric luminosity $L$ (i.e., integrated over all wavelengths). We can write the luminosity emitted per unit wavelength as\n",
    "\n",
    "\\begin{equation}\n",
    "dL = L I(\\lambda) d\\lambda\n",
    "\\end{equation}\n",
    "\n",
    "where \n",
    "\n",
    "\\begin{equation}\n",
    "\\int I(\\lambda) d\\lambda = 1\n",
    "\\end{equation}\n",
    "\n",
    "Remember luminosity is the energy emitted per unit time. The number of photons emitted per unit wavelength $\\lambda_e$ in a time $\\delta t_e$ are given by\n",
    "\n",
    "\\begin{equation}\n",
    "dN(\\lambda_e) = dL \\delta t_e \\frac{\\lambda_e}{hc} = L \\frac{\\lambda_e}{hc} I(\\lambda_e) d\\lambda_e \\delta t_e\n",
    "\\end{equation}\n",
    "\n",
    "The light emitted from the source will reach a sphere at coordinate $\\chi$ after time $t$. The spacetime metric for constant time and constant $\\chi$ value is given by $ds^2 = a^2(t) f^2(\\chi) [d\\theta^2 + \\sin^2\\theta d\\phi^2]$ which is the line element on the surface of a sphere with radius $a^2(t) f^2(\\chi)$. The surface area of this sphere is given by\n",
    "\n",
    "\\begin{equation}\n",
    "\\int a^2(t_r) f^2(\\chi) d\\cos\\theta d\\phi = 4 \\pi a^2(t_r) f^2(\\chi) \n",
    "\\end{equation}\n",
    "\n",
    "We observe these photons today, thus $a^2(t_r)=1$ by definition of the coordinate system to define lengths. The number of photons received per unit wavelength $\\lambda_r$ over the entire surface of the sphere is given by\n",
    "\n",
    "\\begin{equation}\n",
    "dN_r(\\lambda_r) = dN_e\\left( \\frac{\\lambda_r}{(1+z)}\\right) = L \\frac{\\lambda_r}{(1+z)hc} I \\left( \\frac{\\lambda_r}{1+z} \\right) \\frac{d\\lambda_r}{(1+z)} \\delta t_e\n",
    "\\end{equation}\n",
    "\n",
    "Here we have used the fact that the wavelength changes as time goes on in the Universe. Now these photons will be received in an interval of time $\\delta t_r$ as we saw in the derivation in the first section. Thus the amount of energy that passes through the sphere in a unit time interval is given by\n",
    "\n",
    "\\begin{equation}\n",
    "\\frac{dN_r(\\lambda_r)}{\\delta t_r} \\frac{hc}{\\lambda_r} = L \\frac{1}{(1+z)} I \\left( \\frac{\\lambda_r}{1+z} \\right) \\frac{d\\lambda_r}{(1+z)} \\frac{\\delta t_e}{\\delta t_r}\n",
    "\\end{equation}\n",
    "\n",
    "The flux $F(\\lambda_r) d\\lambda_r$ is the amount of energy received per unit time per unit area perpendicular to the line of sight to the source. Thus $F(\\lambda_r) d\\lambda_r$ should be equal to\n",
    "\n",
    "\\begin{eqnarray}\n",
    "F(\\lambda_r) d\\lambda_r &=& \\frac{dN_r(\\lambda_r)}{\\delta t_r} \\frac{hc}{\\lambda_r} \\frac{1}{4\\pi f^2(\\chi) a^2(t_r)} \\\\\n",
    "&=&  \\frac{L}{(1+z)} I \\left( \\frac{\\lambda_r}{1+z} \\right) \\frac{d\\lambda_r}{(1+z)} \\frac{\\delta t_e}{\\delta t_r} \\frac{1}{4\\pi f^2(\\chi) } \\\\\n",
    "&=& \\frac{L}{(1+z)^2} I \\left( \\frac{\\lambda_r}{1+z} \\right) d\\lambda_r \\frac{\\delta t_e}{\\delta t_r} \\frac{1}{4\\pi f^2(\\chi) } \\\\\n",
    "&=& \\frac{L}{(1+z)^3} I \\left( \\frac{\\lambda_r}{1+z} \\right) d\\lambda_r \\frac{1}{4\\pi f^2(\\chi)}\n",
    "\\end{eqnarray}\n",
    "\n",
    "The total bolometric flux is given by the integral over all wavelengths and therefore\n",
    "\n",
    "\\begin{equation}\n",
    "F_{\\rm bol} = \\int F(\\lambda_r) d\\lambda_r = \\frac{L_{\\rm bol}}{(1+z)^2 4\\pi f^2(\\chi)} = \\frac{L_{\\rm bol}}{4\\pi D_{\\rm lum}^2(\\chi)}\n",
    "\\end{equation}\n",
    "\n",
    "This can be intuitively understood as all photons lose energy and arrive at stretched out intervals as the Universe expands. The luminosity distance defined by the last equality is thus given by\n",
    "\\begin{equation}\n",
    "D_{\\rm lum}(\\chi) = (1+z) f(\\chi)\n",
    "\\end{equation}\n",
    "\n",
    "## Dynamics of the Friedmann Robertson Walker metric\n",
    "\n",
    "Now let us try to understand how the scale factor of the Universe changes as a function of time. The equations of General Relativity govern the dynamics in the Universe. \n",
    "\\begin{equation}\n",
    "G_{\\mu\\nu} = \\frac{8 \\pi G}{c^4} T_{\\mu\\nu}\n",
    "\\end{equation}\n",
    "where $G_{\\mu\\nu}$ is the Einstein tensor, and $T_{\\mu\\nu}$ is the energy momentum tensor of the Universe. The left hand side of the equation concerns the metric and its derivatives. So this can be computed based on the metric components that we haver derived heuristically above. \n",
    "\n",
    "We consider the coordinates to be $ct, \\chi, \\theta, \\phi$ as $0, 1, 2, 3$:\n",
    "\\begin{equation}\n",
    "g_{\\mu \\nu} = \n",
    "\\begin{pmatrix}\n",
    "-1 & 0 & 0 & 0 \\\\\n",
    "0  & a^2(t) & 0 & 0 \\\\\n",
    "0  & 0 & a^2(t)f^2(\\chi)  & 0 \\\\\n",
    "0  & 0 & 0 & a^2(t)f^2(\\chi)\\sin^2(\\theta) \n",
    "\\end{pmatrix} \n",
    "\\end{equation}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One can compute the Christoffel symbols for this metric using their definition\n",
    "\n",
    "\\begin{equation}\n",
    "\\Gamma^i_{kl} = \\frac{1}{2}g^{im}\\left[ g_{mk,l} + g_{ml,k} - g_{kl,m} \\right]\n",
    "\\end{equation}\n",
    "\n",
    "<div class=\"alert alert-info \">\n",
    "    \n",
    "Exercise:\n",
    "\n",
    "- Show that $\\Gamma^{0}_{\\mu\\nu} = \\frac{1}{2}g_{\\mu\\nu,0}$.\n",
    "    \n",
    "</div>\n",
    "\n",
    "Then we can use these Christoffel symbols derived from the metric to compute the Riemann tensor\n",
    "\n",
    "\\begin{equation}\n",
    "R^{\\rho}{}_{\\sigma\\mu\\nu} = \\partial_\\mu \\Gamma^{\\rho}_{\\nu\\sigma} - \\partial_{\\nu} \\Gamma^\\rho_{\\mu\\sigma}  + \\Gamma^\\rho_{\\mu\\lambda} \\Gamma^\\lambda_{\\nu\\sigma} - \\Gamma^\\rho_{\\nu\\lambda} \\Gamma^\\lambda_{\\mu\\sigma}\n",
    "\\end{equation}\n",
    "\n",
    "The Riemann tensor can then be contracted to obtain the Ricci tensor by taking a trace\n",
    "\n",
    "\\begin{equation}\n",
    "R_{\\mu\\nu} = R^\\lambda{}_{\\mu\\lambda\\nu}\n",
    "\\end{equation}\n",
    "\n",
    "and the Ricci scalar to obtain\n",
    "\n",
    "\\begin{equation}\n",
    "R = g^{\\mu\\nu}R_{\\mu\\nu}\n",
    "\\end{equation}\n",
    "\n",
    "These components can be finally combined to obtain the Einstein tensor\n",
    "\n",
    "\\begin{equation}\n",
    "G_{\\mu\\nu} = R_{\\mu\\nu} - \\frac{1}{2}R g_{\\mu\\nu}\n",
    "\\end{equation}\n",
    "\n",
    "All of these involve tedious but straightforward mathematics and we will just quote the final results here:\n",
    "\n",
    "\\begin{eqnarray}\n",
    "G_{00} = 3 \\left(\\frac{\\dot{a}}{a} \\right)^2 + 3\\frac{kc^2}{a^2} \\\\\n",
    "G_{ij} = - \\left( 2\\frac{\\ddot{a}}{a}  + \\left[\\frac{\\dot{a}}{a}\\right]^2 + \\frac{k c^2}{a^2} \\right) a^2 \\gamma_{ij}\\,,\n",
    "\\end{eqnarray}\n",
    "\n",
    "where $\\gamma_{ij}$ is the metric of the homoegenous and isotropic 3-space, i.e., $dl^2 = \\gamma_{ij}dx^{i}dx^{j}$. The other components are equal to zero. In what follows, I will show a useful way to compute these tensors in python. We will use the packages `einsteinpy` and `sympy` to carry out these tedious mathematical calculations. In your `sciserver` environment, you could install these packages by typing `%pip install --user einsteinpy` and restarting the jupyter kernel by clicking `Kernel` and then `Restart`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import important packages\n",
    "\n",
    "import sympy\n",
    "from einsteinpy.symbolic import MetricTensor, ChristoffelSymbols, RiemannCurvatureTensor, RicciTensor, RicciScalar, EinsteinTensor\n",
    "from sympy import Function, simplify\n",
    "\n",
    "# Enable the best printing solution\n",
    "sympy.init_printing()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define symbols\n",
    "\n",
    "def get_metric(univ_type):\n",
    "    syms = sympy.symbols(\"t chi theta phi\")\n",
    "    t, chi, theta, phi = syms\n",
    "    a, R, c = sympy.symbols(\"a R c\")\n",
    "\n",
    "    # Initialize a 2d 4x4 array\n",
    "    list2d = [[0 for i in range(4)] for i in range(4)]\n",
    "\n",
    "    # Define the function f depending upon the type of the Universe\n",
    "    def f(x, universe):\n",
    "        if universe==\"flat\":\n",
    "            return x\n",
    "        if universe==\"closed\":\n",
    "            return sympy.sin(x)\n",
    "        if universe==\"open\":\n",
    "            return sympy.sinh(x)\n",
    "\n",
    "    # Set the diagonal elements to be g_{\\mu\\nu}\n",
    "    list2d[0][0] = -1\n",
    "    list2d[1][1] = Function(a)(t)**2 \n",
    "    list2d[2][2] = Function(a)(t)**2*(R*f(chi/R, univ_type))**2\n",
    "    list2d[3][3] = Function(a)(t)**2* (R*f(chi/R, univ_type))**2 * (sympy.sin(theta) ** 2)\n",
    "\n",
    "    # Define the metric\n",
    "    frw = MetricTensor(list2d, syms)\n",
    "\n",
    "    # Visualize the metric\n",
    "    frw.tensor()\n",
    "    \n",
    "    return frw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "open_metric = get_metric(\"open\")\n",
    "closed_metric = get_metric(\"closed\")\n",
    "flat_metric = get_metric(\"flat\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\left[\\begin{matrix}-1 & 0 & 0 & 0\\\\0 & a^{2}{\\left(t \\right)} & 0 & 0\\\\0 & 0 & R^{2} a^{2}{\\left(t \\right)} \\sinh^{2}{\\left(\\frac{\\chi}{R} \\right)} & 0\\\\0 & 0 & 0 & R^{2} a^{2}{\\left(t \\right)} \\sin^{2}{\\left(\\theta \\right)} \\sinh^{2}{\\left(\\frac{\\chi}{R} \\right)}\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "⎡-1    0            0                      0            ⎤\n",
       "⎢                                                       ⎥\n",
       "⎢     2                                                 ⎥\n",
       "⎢0   a (t)          0                      0            ⎥\n",
       "⎢                                                       ⎥\n",
       "⎢            2  2        2⎛χ⎞                           ⎥\n",
       "⎢0     0    R ⋅a (t)⋅sinh ⎜─⎟              0            ⎥\n",
       "⎢                         ⎝R⎠                           ⎥\n",
       "⎢                                                       ⎥\n",
       "⎢                               2  2       2        2⎛χ⎞⎥\n",
       "⎢0     0            0          R ⋅a (t)⋅sin (θ)⋅sinh ⎜─⎟⎥\n",
       "⎣                                                    ⎝R⎠⎦"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "open_metric.tensor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle - \\frac{2.0 \\frac{d^{2}}{d t^{2}} a{\\left(t \\right)}}{a{\\left(t \\right)}} - \\frac{1.0 \\left(\\frac{d}{d t} a{\\left(t \\right)}\\right)^{2}}{a^{2}{\\left(t \\right)}} + \\frac{1.0}{R^{2} a^{2}{\\left(t \\right)}}$"
      ],
      "text/plain": [
       "        2                               \n",
       "       d                    2           \n",
       "  2.0⋅───(a(t))   ⎛d       ⎞            \n",
       "        2         ⎜──(a(t))⎟            \n",
       "      dt          ⎝dt      ⎠      1.0   \n",
       "- ───────────── - ─────────── + ────────\n",
       "       a(t)           2          2  2   \n",
       "                     a (t)      R ⋅a (t)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simplify(EinsteinTensor.from_metric(open_metric).tensor()[1,1]/open_metric.tensor()[1, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle - \\frac{2.0 a{\\left(t \\right)} \\frac{d^{2}}{d t^{2}} a{\\left(t \\right)} + 1.0 \\left(\\frac{d}{d t} a{\\left(t \\right)}\\right)^{2}}{a^{2}{\\left(t \\right)}}$"
      ],
      "text/plain": [
       " ⎛           2                       2⎞ \n",
       " ⎜          d              ⎛d       ⎞ ⎟ \n",
       "-⎜2.0⋅a(t)⋅───(a(t)) + 1.0⋅⎜──(a(t))⎟ ⎟ \n",
       " ⎜           2             ⎝dt      ⎠ ⎟ \n",
       " ⎝         dt                         ⎠ \n",
       "────────────────────────────────────────\n",
       "                  2                     \n",
       "                 a (t)                  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simplify(EinsteinTensor.from_metric(flat_metric).tensor()[1,1]/flat_metric.tensor()[1, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle - \\frac{2.0 \\frac{d^{2}}{d t^{2}} a{\\left(t \\right)}}{a{\\left(t \\right)}} - \\frac{1.0 \\left(\\frac{d}{d t} a{\\left(t \\right)}\\right)^{2}}{a^{2}{\\left(t \\right)}} - \\frac{1.0}{R^{2} a^{2}{\\left(t \\right)}}$"
      ],
      "text/plain": [
       "        2                               \n",
       "       d                    2           \n",
       "  2.0⋅───(a(t))   ⎛d       ⎞            \n",
       "        2         ⎜──(a(t))⎟            \n",
       "      dt          ⎝dt      ⎠       1    \n",
       "- ───────────── - ─────────── - ────────\n",
       "       a(t)           2          2  2   \n",
       "                     a (t)      R ⋅a (t)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simplify(EinsteinTensor.from_metric(closed_metric).tensor()[1,1]/closed_metric.tensor()[1, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle \\frac{3.0 \\left(R^{2} \\left(\\frac{d}{d t} a{\\left(t \\right)}\\right)^{2} + 1\\right)}{R^{2} a^{2}{\\left(t \\right)}}$"
      ],
      "text/plain": [
       "    ⎛             2    ⎞\n",
       "    ⎜ 2 ⎛d       ⎞     ⎟\n",
       "3.0⋅⎜R ⋅⎜──(a(t))⎟  + 1⎟\n",
       "    ⎝   ⎝dt      ⎠     ⎠\n",
       "────────────────────────\n",
       "         2  2           \n",
       "        R ⋅a (t)        "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simplify(EinsteinTensor.from_metric(closed_metric).tensor()[0,0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The energy momentum tensor\n",
    "\n",
    "\n",
    "The energy momentum tensor $T_{\\mu\\nu}$ is the flux of the 4-momentum $p_{\\mu}$. In a homogeneous and isotropic Universe it must have only a diagonal form, with the space components all being equal. In the lecture course on GR, you have encountered the energy momentum tensor of ideal fluid, which is exactly what we will use for the energy momentum tensor in the Einstein field equations for the Universe. The ideal fluid is described by its density $\\rho$ and pressure $p$. The energy momentum tensor is given by\n",
    "\n",
    "\\begin{equation}\n",
    "T_{\\mu \\nu} = (\\rho c^2 + p) u_{\\mu} u_{\\nu} + p c^2 g_{\\mu\\nu}\n",
    "\\end{equation}\n",
    "\n",
    "For fundamental observer which move with the mean motion of the Universe, $u_{\\mu}=[c, 0, 0, 0]$, because the three spatial coordinates do not change with time, and the derivative of the first coordinate $ct$ with respect to proper time is just $c$. For the zero zero component,\n",
    "\n",
    "\\begin{eqnarray}\n",
    "T_{00} &=& \\rho(t) c^4 \\\\\n",
    "T_{ij}  &=& p(t) c^2 a^2(t) \\gamma_{ij}\n",
    "\\end{eqnarray}\n",
    "\n",
    "Equating the $00$ component of the Einstein's field equations, we get the first of the Friedmann equations,\n",
    "\\begin{equation}\n",
    "\\left[ \\left(\\frac{\\dot{a}}{a}\\right)^2 + \\frac{kc^2}{a^2} \\right] = \\frac{8\\pi G \\rho}{3}\n",
    "\\end{equation}\n",
    "\n",
    "and the second equation corresponds to the $ij$ components\n",
    "\\begin{equation}\n",
    "- \\left[ \\frac{2\\ddot{a}}{a} + \\left(\\frac{\\dot{a}}{a}\\right)^2 + \\frac{k c^2}{a^2} \\right] = 8 \\pi G \\frac{p}{c^2}\n",
    "\\end{equation}\n",
    "\n",
    "The above two equation can be combined to obtain\n",
    "\n",
    "\\begin{equation}\n",
    "\\frac{\\ddot{a}}{a} = - \\frac{4\\pi G}{3} \\left(\\rho + \\frac{3 p}{c^2}\\right) \n",
    "\\end{equation}\n",
    "\n",
    "This shows that for energy density in the Universe with a non-negative pressure, the scale factor $a(t)$ cannot have a positive acceleration.\n",
    "\n",
    "The two equations given above also imply the following intuitive conservation equation if you multiply the first equation by $a^3$ and then differentiating and getting rid of the second derivative term using the second equation:\n",
    "\n",
    "\\begin{equation}\n",
    "\\frac{d}{dt}\\left[ a^3 \\rho c^2 \\right] + p \\frac{d}{dt}\\left[ a^3 \\right] = 0\n",
    "\\end{equation}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info \">\n",
    "    \n",
    "Exercise:\n",
    "\n",
    "- Prove the equality given above using the Friedmann equations.\n",
    "- Show that this equality also implies\n",
    "\\begin{equation}\n",
    "\\frac{d\\rho}{dt} + 3 \\frac{\\dot{a}}{a} \\left(\\rho + \\frac{p}{c^2}\\right) = 0\n",
    "\\end{equation}\n",
    "    \n",
    "</div>\n",
    "\n",
    "Let us take a look at the first Friedmann equation to compute the evolution of the scale factor of the Universe.\n",
    "\n",
    "\\begin{equation}\n",
    "\\left[ \\left(\\frac{\\dot{a}}{a}\\right)^2 + \\frac{kc^2}{a^2} \\right] = \\frac{8\\pi G \\rho}{3}\n",
    "\\end{equation}\n",
    "\n",
    "What are the initial conditions for this problem. Since the scale factor is a growth factor we are free to choose the normalization. Let us work with the condition that $a(t)=1$ today. The factor ${\\dot{a}}/{a}$ is nothing but the Hubble Lemaitre constant today whose value can be measured with observations. Thus the value of Hubble Lemaitre constant $H_0$ is our second initial condition. This along with the behaviour of energy density with $a$ should allow us to integrate the above equation. \n",
    "\n",
    "Before we solve the Friedmann equation, notice that for the Universe to be spatially flat, the density of the Universe today should be equal to a very special value\n",
    "\\begin{equation}\n",
    "\\rho_{\\rm crit} = \\frac{3H_0^2}{8\\pi G}\n",
    "\\end{equation}\n",
    "\n",
    "\\begin{eqnarray}\n",
    "\\left(\\frac{\\dot{a}}{a}\\right)^2 &=& H_0^2 \\left[ \\frac{\\rho}{\\rho_{\\rm crit}} - \\frac{kc^2}{a^2H_0^2} \\right]  \n",
    "\\end{eqnarray}\n",
    "Substituting $\\dot{a}/a = H_0$ today, we find that. \n",
    "\\begin{eqnarray}\n",
    "1 &=& \\left[ \\frac{\\rho_0}{\\rho_{\\rm crit}} - \\frac{kc^2}{H_0^2} \\right] \\\\\n",
    "-\\frac{kc^2}{H_0^2} &=& \\left[ 1 - \\frac{\\rho_0}{\\rho_{\\rm crit}} \\right] : =  \\Omega_{\\rm k, 0}\n",
    "\\end{eqnarray}\n",
    "If the Universe is denser than $\\rho_{\\rm crit}$ today, then it has a closed geometry $k>0$, while a Universe which is less dense than the critical density will have an open geometry with $k<0$. Thus we can simplify the Friedmann equation to\n",
    "\n",
    "\\begin{eqnarray}\n",
    "\\left(\\frac{\\dot{a}}{a}\\right)^2 &=& H_0^2 \\left[ \\frac{\\rho}{\\rho_{\\rm crit}} + \\frac{\\Omega_{\\rm k, 0}}{a^2} \\right]  \n",
    "\\end{eqnarray}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we need to figure out how the density of the Universe changes as a function of time. Let us consider a few cases to understand the evolution of these components in a non-static Universe. Let us first consider just matter. For matter the pressure comes from velocities. However given that the velocities of matter are non-relativistic, the pressure is negligible compared to the energy density. Thus for matter, we have $p << \\rho c^2$, and it can be ignored. The equation of energy conservation then implies\n",
    "\n",
    "\\begin{equation}\n",
    "\\frac{d}{dt}\\left[ a^3 \\rho c^2 \\right] = 0\n",
    "\\end{equation}\n",
    "\n",
    "Thus the matter density $\\rho_{\\rm m} \\propto a^{-3}$, the density decreases if the Universe expands, and increases if the Universe contracts. This is consistent with the increase in the total volume of the Universe $\\propto a^3$ due to the increase in scale factor, and thus the density decreases by the same factor $a^3$ if there is conservation of matter in a comoving volume.\n",
    "\n",
    "What about another form of energy density in the Universe, that of radiation. One can show that the photon energy density is related to the pressure such that\n",
    "\n",
    "\\begin{equation}\n",
    "p = \\frac{1}{3} \\rho c^2\n",
    "\\end{equation}\n",
    "\n",
    "Plugging this into the pressure density equation, we find\n",
    "\\begin{equation}\n",
    "\\rho_{\\rm rad} \\propto a^{-4}\n",
    "\\end{equation}\n",
    "\n",
    "The energy density of radiation changes due to the change in volume as well as the change in energy that a photon undergoes when the Universe expands or contracts.\n",
    "\n",
    "<div class=\"alert alert-info \">\n",
    "    \n",
    "Exercise:\n",
    "\n",
    "- Find how the density of an ideal fluid with pressure $p =w \\rho c^2$ evolves in a non-static Universe as a function of the scale factor.\n",
    "    \n",
    "</div>\n",
    "\n",
    "The real Universe can have fluids of different kinds all together thus the combined Friedmann equation looks like\n",
    "\n",
    "\\begin{eqnarray}\n",
    "\\left(\\frac{\\dot{a}}{a}\\right)^2 &=& H_0^2 \\left[ \\frac{\\rho_m}{\\rho_{\\rm crit}} + \\frac{\\rho_{\\rm rad}}{\\rho_{\\rm crit}} + \\frac{\\rho_{\\rm w}}{\\rho_{\\rm crit}} +  \\frac{\\Omega_k}{a^2} \\right]  = H_0^2 E^2(a)\n",
    "\\end{eqnarray}\n",
    "\n",
    "Analogous to $\\Omega_{\\rm k}$ we can define $\\Omega_{\\rm x, 0} = \\rho_{\\rm x, 0}/\\rho_{\\rm crit}$ which finally reduces the equation to a much more manageable form\n",
    "\\begin{eqnarray}\n",
    "\\left(\\frac{\\dot{a}}{a}\\right)^2 &=& H_0^2 \\left[ \\Omega_{\\rm m, 0} a^{-3} + \\Omega_{\\rm rad, 0} a^{-4} + \\Omega_{\\rm w, 0}a ^{-3(1+w)} + \\Omega_k a^{-2} \\right]  = H_0^2 E^2(a)\n",
    "\\end{eqnarray}\n",
    "where $\\Omega_{\\rm k} = 1 - \\Omega_{\\rm m} - \\Omega_{\\rm rad} - \\Omega_{\\rm w, 0}$. Current observations indicate that a special fluid called dark energy with an equation of state $w=-1$ is required to be present in the Universe. Thus we will assume that the Universe has these combinations of fluid (matter, radiation and $\\Lambda$).\n",
    "\n",
    "\n",
    "### Matter dominated Universe\n",
    "First let us consider a Universe just made up of matter. In this case the Friedmann equation is very simple\n",
    "\\begin{eqnarray}\n",
    "\\left(\\frac{\\dot{a}}{a}\\right) &=& H_0 \\left[\\Omega_{\\rm m, 0}a^{-3} +  (1-\\Omega_{\\rm m,0}) a^{-2} \\right]^{1/2} \n",
    "\\end{eqnarray}\n",
    "In such a Universe, we can obtain $\\dot{a}=0$, if and only if\n",
    "\\begin{equation}\n",
    "\\Omega_{\\rm m, 0}a^{-3} +  (1-\\Omega_{\\rm m,0}) a^{-2} = 0\n",
    "\\end{equation}\n",
    "which gives a special epoch\n",
    "\\begin{equation}\n",
    "a = \\frac{\\Omega_{\\rm m, 0}}{(\\Omega_{\\rm m,0}-1)}\n",
    "\\end{equation}\n",
    "Notice that this has a non-negative scale factor only if $\\Omega_{\\rm m,0}>1$. Thus if the Universe has $\\Omega_{\\rm m}>1$ which corresponds to $\\Omega_{\\rm k}<0$, the scale factor has a maximum. Given that the Universe is expanding today it means that the Universe will stop its expansion at a finite future, and given that the value of $\\ddot{a}<0$, such a Universe will start contracting.\n",
    "\n",
    "For $\\Omega_{\\rm m, 0}=1$, the Universe keeps on increasing at an ever slow pace and only asymptotically reaches $\\dot{a}=0$, while for a $\\Omega_{\\rm m,0}<1$, the Universe keeps on expanding but never reaches a scale factor where the expansion halts.\n",
    "\n",
    "Let us consider one of these special cases: $\\Omega_{\\rm m,0}=1$.  In this case, we obtain\n",
    "\\begin{eqnarray}\n",
    "\\left(\\frac{\\dot{a}}{a}\\right) &=& H_0 a^{-3/2}  \\\\\n",
    "\\int_{a}^{1} a^{1/2} da &=& \\int_{t}^{t_0} H_0 dt \\\\\n",
    "\\left.\\frac{2a^{3/2}}{3}\\right|_{a}^{1} &=& H_0(t_0-t) \\\\\n",
    "a(t) &=& \\left[1 - \\frac{3}{2}H_0 (t_0-t)\\right]^{2/3}\n",
    "\\end{eqnarray}\n",
    "In this model the current age of the Universe $t_0$ is related to the time at which $a=0$ as\n",
    "\\begin{eqnarray}\n",
    "t_0-t = \\frac{2}{3H_0}\n",
    "\\end{eqnarray}\n",
    "\n",
    "### Radiation dominated Universe\n",
    "\n",
    "In the early Universe when it was small, radiation is expected to dominate the energy density of the Universe as it increases quicker than $\\rho_{\\rm m}$ as $a\\rightarrow 0$.  In this case the Friedmann equation looks like\n",
    "\\begin{eqnarray}\n",
    "\\left(\\frac{\\dot{a}}{a}\\right) &=& H_0 \\Omega_{r, 0} a^{-2}  \\\\\n",
    "\\int a da &=& \\int H_0 \\Omega_{r, 0} dt \\\\\n",
    "\\frac{a^2}{2} &=& H_0 \\Omega_{r, 0} t  \\\\\n",
    "a(t) &=& [2 H_0 \\Omega_{r, 0} t]^{1/2}\n",
    "\\end{eqnarray}\n",
    "\n",
    "### Lambda dominated Universe\n",
    "\n",
    "On the other hand, when $a>>1$, we expect the Universe to be dominated by $\\Omega_{\\rm \\Lambda}$. The Friedmann equation for that case looks like\n",
    "\\begin{eqnarray}\n",
    "\\left(\\frac{\\dot{a}}{a}\\right) &=& H_0 \\Omega_{\\Lambda, 0} \\\\\n",
    "\\end{eqnarray}\n",
    "and we obtain\n",
    "\\begin{eqnarray}\n",
    "a(t) = \\exp\\left[ H_0 \\Omega_{\\Lambda, 0} (t-t_0) \\right] \\\\\n",
    "\\end{eqnarray}\n",
    "and the Universe will reach a state of exponential expansion.\n",
    "\n",
    "From all these simple homogeneous and isotropic models, we can work out the expansion history of the Universe, its age, and its fate by making some simple measurements of the energy density of various constituents in the Universe and the Hubble Lemaitre constant which measures the rate of expansion of the Universe today! A number of cosmology experiments use these simple equations to relate scale factor and time to help us understand the history and fate of the Universe.\n",
    "\n",
    "\n",
    "## Horizons in the Universe\n",
    "\n",
    "Because light travels at a finite speed in the Universe, it can only travel a finite distance from a source given the age of the Universe today. Let us compute what is the comoving distance light would have travelled from $a=0$ to today $a=1$.\n",
    "\n",
    "\\begin{eqnarray}\n",
    "\\chi_{\\rm horizon} &=& \\int_0^{1} \\frac{cdt}{a(t)} \\\\\n",
    "&=& \\int_0^{1} \\frac{cda}{\\dot{a}a(t)} \\\\\n",
    "&=& \\int_0^1 \\frac{cda}{\\frac{\\dot{a}}{a} a^2(t)} \\\\\n",
    "&=& \\int_0^1 \\frac{cda}{H_0 E(a) a^2(t)}\n",
    "\\end{eqnarray}\n",
    "\n",
    "This is a finite quantity. Given causality, anything in the Universe can not be affected by object beyond its horizon."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.integrate import quad\n",
    "from scipy import optimize\n",
    "\n",
    "\n",
    "class cosmology:\n",
    "    \n",
    "    def __init__(self, Omega_m, Omega_r, Omega_l, H0):\n",
    "        self.Omega_m = Omega_m\n",
    "        self.Omega_r = Omega_r\n",
    "        self.Omega_l = Omega_l\n",
    "        self.H0 = H0\n",
    "        \n",
    "        # Define the curvature based on the Friedmann equation evaluated at t=today.\n",
    "        self.Omega_k = 1 - Omega_m - Omega_r - Omega_l\n",
    "        \n",
    "        self.a_max = self.max_scale_factor()\n",
    "        print(self.a_max, \"Maximum scale factor\")\n",
    "        \n",
    "    def zofa(self, a):\n",
    "        return 1./a - 1.\n",
    "\n",
    "    def aofz(self, z):\n",
    "        return 1/(1.+z)\n",
    "        \n",
    "    # Define the RHS of the Friedmann equation\n",
    "    def Esqofa(self, a):\n",
    "        return (self.Omega_m*a**-3 + self.Omega_r*a**-4 + self.Omega_l + self.Omega_k*a**-2 )\n",
    "    \n",
    "    # Define derivative of the RHS of the Friedmann equation\n",
    "    def Esqprimeofa(self, a):\n",
    "        return (-3.*self.Omega_m*a**-4 - 4.*self.Omega_r*a**-5 - 2.*self.Omega_k*a**-3 )  \n",
    "    \n",
    "    # Define the RHS of the Friedmann equation\n",
    "    def Eofa(self, a):\n",
    "        return (self.Omega_m*a**-3 + self.Omega_r*a**-4 + self.Omega_l + self.Omega_k*a**-2 )**0.5\n",
    "\n",
    "    # Define derivative of the RHS of the Friedmann equation\n",
    "    def Eprimeofa(self, a):\n",
    "        return (-3*self.Omega_m*a**-4 - 4*self.Omega_r*a**-5 - 2*self.Omega_k*a**-3 )/(self.Omega_m*a**-3 + self.Omega_r*a**-4 + self.Omega_l + self.Omega_k*a**-2 )**0.5\n",
    "\n",
    "    \n",
    "    # Define the time given a scale factor (time will be returned in units of 1/H0)\n",
    "    def compute_time_given_scale(self, a, contracting=False):\n",
    "        \n",
    "        # Integrate the function \\int da/a/E(a) = \\int d(t/(1/H0))\n",
    "        def integrand(ap):\n",
    "            return 1/ap/self.Eofa(ap)\n",
    "        \n",
    "        if a>self.a_max:\n",
    "            return np.nan\n",
    "        \n",
    "        answer = 0\n",
    "        if contracting:\n",
    "            exp_soln, error = quad(integrand, 1, self.a_max)\n",
    "            cont_soln, error2 = quad(integrand, self.a_max, a)\n",
    "            answer = exp_soln - cont_soln\n",
    "        else:\n",
    "            answer, error = quad(integrand, 1, a)\n",
    "            \n",
    "        return answer\n",
    "    \n",
    "    # Compute maximum scale factor if the Universe is closed based on the zero of Eofa\n",
    "    def max_scale_factor(self):\n",
    "        if self.Omega_k>=0:\n",
    "            return np.inf\n",
    "        \n",
    "        # Compute the zero of the expansion factor\n",
    "        sol = optimize.root_scalar(self.Esqofa, x0=1.0, fprime=self.Esqprimeofa, method='newton')    \n",
    "        \n",
    "        if sol.flag == \"convergence error\":\n",
    "            sol.root = np.inf\n",
    "            \n",
    "        return sol.root\n",
    "    \n",
    "\n",
    "    # Exercise:\n",
    "    # Write code to compute coordinate distance $\\chi$ as a function of the scale factor\n",
    "    # Integrand is: \\int c dt/a(t) = \\int dchi\n",
    "    # Forget about the contracting case for now.\n",
    "    \n",
    "    # Write code to compute angular diameter distance as a function of the scale factor\n",
    "    # f(chi) * a(t)\n",
    "    \n",
    "    # Write code to compute the luminosity distance as a function of the scale factor\n",
    "    # f(chi) / a(t)\n",
    "    \n",
    "    # Write code to compute the comoving distance travelled by light from a given scale factor to today\n",
    "    # Integrand is: \\int c dt/a(t) = \\int c/H0 da/E(a)/a^2(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inf Maximum scale factor\n",
      "inf Maximum scale factor\n",
      "1.4999999999999998 Maximum scale factor\n"
     ]
    }
   ],
   "source": [
    "flat_c = cosmology(1.0, 0.0, 0.0, 100.0)\n",
    "open_c = cosmology(0.1, 0.0, 0.0, 100.0)\n",
    "closed_c = cosmology(3.0, 0.0, 0.0, 100.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.01       0.01029903 0.01059806 ... 2.99940194 2.99970097 3.        ]\n"
     ]
    }
   ],
   "source": [
    "# Compute scale factor versus time\n",
    "scale_arr = np.linspace(1e-2, 3., 10000)\n",
    "print(scale_arr)\n",
    "\n",
    "time_arr_flat = scale_arr*0.0\n",
    "time_arr_closed = scale_arr*0.0\n",
    "time_arr_closed_cont = scale_arr*0.0\n",
    "time_arr_open = scale_arr*0.0\n",
    "for ii in range(scale_arr.size):\n",
    "    time_arr_flat[ii] = flat_c.compute_time_given_scale(scale_arr[ii])\n",
    "    time_arr_closed[ii] = closed_c.compute_time_given_scale(scale_arr[ii])\n",
    "    time_arr_closed_cont[ii] = closed_c.compute_time_given_scale(scale_arr[ii], contracting=True)\n",
    "    time_arr_open[ii] = open_c.compute_time_given_scale(scale_arr[ii])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n",
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "import pylab as pl\n",
    "%pylab inline\n",
    "\n",
    "conf = %config InlineBackend.rc\n",
    "conf[\"figure.figsize\"] = (6, 6)\n",
    "conf['savefig.dpi']=100\n",
    "conf['font.serif'] = \"Computer Modern\"\n",
    "conf['font.sans-serif'] = \"Computer Modern\"\n",
    "conf['text.usetex']=True\n",
    "\n",
    "width = 600\n",
    "%config InlineBackend.rc\n",
    "%pylab inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(-0.15, 1.5, 'today')"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = pl.subplot(111)\n",
    "\n",
    "idx = ~(time_arr_closed==0)\n",
    "ax.plot(time_arr_closed[idx], scale_arr[idx], label=\"closed\")\n",
    "ax.plot(time_arr_closed_cont[idx], scale_arr[idx], label=\"closed\")\n",
    "ax.plot(time_arr_open, scale_arr, label=\"open\")\n",
    "ax.plot(time_arr_flat, scale_arr, label=\"flat\")\n",
    "ax.set_xlabel(r\"(t - $t_{\\rm today})$ [1/$H_0$]\")\n",
    "ax.set_ylabel(\"Scale factor a\")\n",
    "ax.axvline(0.0, color=\"k\", alpha=0.6)\n",
    "ax.legend()\n",
    "ax.set_ylim(0.0, 3.0)\n",
    "ax.text(-0.15, 1.5, \"today\", rotation=90)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info \">\n",
    "    \n",
    "Exercise:\n",
    "\n",
    "- Complete the simple python code above to figure out how the luminosity distance, and the angular diameter distance change as a function of the scale factor.\n",
    "- Make plots of these distances as a function of the scale factor.\n",
    "- Use the above code to see how the scale factor of the Universe changes as a function of time for a Universe with $\\Omega_{\\rm m}=0.3, \\Omega_{\\rm r}=0.0$ and $\\Omega_{\\Lambda}=0.7$.\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "According to the cosmological observations today, we have $\\Omega_{\\rm m}=0.315$, $\\Omega_{\\rm \\Lambda}=0.685$, $\\Omega_{r}\\sim 10^{-4}$. Given that the density of these components are a function of the scale factor, the energy densities will change. Even though the radiation energy density is extremely small today, at early times when the scale factor was small, the constituents of the Universe will be entirely dominated by radiation. Thus the behaviour of the scale factor at different times depends upon the constituents.\n",
    "\n",
    "<div class=\"alert alert-info \">\n",
    "    \n",
    "Exercise:\n",
    "    \n",
    "Some questions to ponder:\n",
    "\n",
    "Does a closed Universe always mean that it will undergo a big crunch?\n",
    "Does a Universe with a $\\Lambda$ always mean that it will expand exponentially?\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, '$E^2(a)$')"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = pl.subplot(111)\n",
    "\n",
    "closed_c = cosmology(1.0, 0.1, 1.0, 100.0)\n",
    "\n",
    "a = np.linspace(1.0, 10, 100000)\n",
    "eofa = closed_c.Esqofa(a)\n",
    "\n",
    "ax.plot(a, eofa)\n",
    "ax.set_ylim(-1, 1)\n",
    "ax.axhline(0)\n",
    "ax.set_xlabel(\"$a$\")\n",
    "ax.set_ylabel(\"$E^2(a)$\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
